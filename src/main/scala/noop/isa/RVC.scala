// This package is used to deal with RVC decode
package noop

import chisel3._
import chisel3.util._
import chisel3.util.experimental.BoringUtils

import utils._


object RVCInstr extends HasInstrType {

  // RVC 00
//   def C_XX    = BitPat("b????????????????_???_?_10_987_65_432_10")
  def C_ILLEGAL  = BitPat("b????????????????_000_0_00_000_00_000_00")
  def C_ADDI4SPN = BitPat("b????????????????_000_?_??_???_??_???_00")
  def C_FLD      = BitPat("b????????????????_001_?_??_???_??_???_00")
//   def C_LQ    = BitPat("b????????????????_001_?_??_???_??_???_00")
  def C_LW       = BitPat("b????????????????_010_?_??_???_??_???_00")
//   def C_FLW   = BitPat("b????????????????_011_?_??_???_??_???_00")
  def C_LD       = BitPat("b????????????????_011_?_??_???_??_???_00")
//   def C_LI    = BitPat("b????????????????_100_?_??_???_??_???_00") //reserved
  def C_FSD      = BitPat("b????????????????_101_?_??_???_??_???_00")
//   def C_SQ    = BitPat("b????????????????_101_?_??_???_??_???_00")
  def C_SW       = BitPat("b????????????????_110_?_??_???_??_???_00")
//   def C_FSW   = BitPat("b????????????????_111_?_??_???_??_???_00")
  def C_SD       = BitPat("b????????????????_111_?_??_???_??_???_00")

  // RVC 01
  def C_NOP    = BitPat("b????????????????_000_?_00_000_??_???_01")
  def C_ADDI    = BitPat("b????????????????_000_?_??_???_??_???_01")
  def C_JAL    = BitPat("b????????????????_001_?_??_???_??_???_01")
  def C_ADDIW    = BitPat("b????????????????_001_?_??_???_??_???_01")
  def C_LI    = BitPat("b????????????????_010_?_??_???_??_???_01")
  def C_ADDI16SP    = BitPat("b????????????????_011_?_00_010_??_???_01")
  def C_LUI    = BitPat("b????????????????_011_?_??_???_??_???_01")
  def C_SRLI    = BitPat("b????????????????_100_?_00_???_??_???_01")
//   def C_SRLI64    = BitPat("b????????????????_100_0_01_???_00_000_01")
  def C_SRAI    = BitPat("b????????????????_100_?_01_???_??_???_01")
//   def C_SAI64    = BitPat("b????????????????_100_0_01_???_00_000_01")
  def C_ANDI    = BitPat("b????????????????_100_?_10_???_??_???_01")
  def C_SUB     = BitPat("b????????????????_100_0_11_???_??_???_01")
  def C_XOR     = BitPat("b????????????????_100_0_11_???_??_???_01")
  def C_OR      = BitPat("b????????????????_100_0_11_???_??_???_01")
  def C_AND     = BitPat("b????????????????_100_0_11_???_??_???_01")
  def C_SUBW    = BitPat("b????????????????_100_1_11_???_??_???_01")
  def C_ADDW    = BitPat("b????????????????_100_1_11_???_??_???_01")
//   def C_RES     = BitPat("b????????????????_100_1_11_???_??_???_01")
//   def C_RES     = BitPat("b????????????????_100_1_11_???_??_???_01")
  def C_J       = BitPat("b????????????????_101_?_??_???_??_???_01")
  def C_BEQZ    = BitPat("b????????????????_110_?_??_???_??_???_01")
  def C_BNEZ    = BitPat("b????????????????_111_?_??_???_??_???_01")

  //RVC 11
  def C_SLLI    = BitPat("b????????????????_000_?_??_???_??_???_10")
//   def C_SLLI64  = BitPat("b????????????????_000_0_??_???_00_000_10")
  def C_FLDSP   = BitPat("b????????????????_001_?_??_???_??_???_10")
  def C_LQSP    = BitPat("b????????????????_001_?_??_???_??_???_10")
  def C_LWSP    = BitPat("b????????????????_010_?_??_???_??_???_10")
  def C_FLWSP   = BitPat("b????????????????_011_?_??_???_??_???_10")
  def C_LDSP    = BitPat("b????????????????_011_?_??_???_??_???_10")
  def C_JR      = BitPat("b????????????????_100_0_??_???_00_000_10")
  def C_MV      = BitPat("b????????????????_100_0_??_???_??_???_10")
  def C_EBREAK  = BitPat("b????????????????_100_1_00_000_00_000_10")
  def C_JALR    = BitPat("b????????????????_100_1_??_???_??_???_10")
  def C_ADD     = BitPat("b????????????????_100_1_??_???_??_???_10")
  def C_FSDSP   = BitPat("b????????????????_101_?_??_???_??_???_10")
  def C_SQSP    = BitPat("b????????????????_101_?_??_???_??_???_10")
  def C_SWSP    = BitPat("b????????????????_110_?_??_???_??_???_10")
  def C_FSWSP   = BitPat("b????????????????_111_?_??_???_??_???_10")
  def C_SDSP    = BitPat("b????????????????_111_?_??_???_??_???_10")

  // TODO: HINT
  // TODO: RES

//   def is_C_ADDI4SPN(op: UInt) = op(12,5) =/= 0.U

  val table = Array(
    C_ILLEGAL    -> List(InstrI, FuType.alu, ALUOpType.add),
    C_ADDI4SPN   -> List(InstrI, FuType.alu, ALUOpType.add),
    C_FLD        -> List(InstrI, FuType.alu, ALUOpType.add),
    C_LW         -> List(InstrI, FuType.alu, ALUOpType.add),
    C_LD         -> List(InstrI, FuType.alu, ALUOpType.add),
    C_FSD        -> List(InstrI, FuType.alu, ALUOpType.add),
    C_SW         -> List(InstrI, FuType.alu, ALUOpType.add),
    C_SD         -> List(InstrI, FuType.alu, ALUOpType.add),
    C_NOP        -> List(InstrI, FuType.alu, ALUOpType.add),
    C_ADDI       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_JAL        -> List(InstrI, FuType.alu, ALUOpType.add),
    C_ADDIW      -> List(InstrI, FuType.alu, ALUOpType.add),
    C_LI         -> List(InstrI, FuType.alu, ALUOpType.add),
    C_ADDI16SP   -> List(InstrI, FuType.alu, ALUOpType.add),
    C_LUI        -> List(InstrI, FuType.alu, ALUOpType.add),
    C_SRLI       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_SRAI       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_ANDI       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_SUB        -> List(InstrI, FuType.alu, ALUOpType.add),
    C_XOR        -> List(InstrI, FuType.alu, ALUOpType.add),
    C_OR         -> List(InstrI, FuType.alu, ALUOpType.add),
    C_AND        -> List(InstrI, FuType.alu, ALUOpType.add),
    C_SUBW       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_ADDW       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_J          -> List(InstrI, FuType.alu, ALUOpType.add),
    C_BEQZ       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_BNEZ       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_SLLI       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_FLDSP      -> List(InstrI, FuType.alu, ALUOpType.add),
    C_LQSP       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_LWSP       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_FLWSP      -> List(InstrI, FuType.alu, ALUOpType.add),
    C_LDSP       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_JR         -> List(InstrI, FuType.alu, ALUOpType.add),
    C_MV         -> List(InstrI, FuType.alu, ALUOpType.add),
    C_EBREAK     -> List(InstrI, FuType.alu, ALUOpType.add),
    C_JALR       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_ADD        -> List(InstrI, FuType.alu, ALUOpType.add),
    C_FSDSP      -> List(InstrI, FuType.alu, ALUOpType.add),
    C_SQSP       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_SWSP       -> List(InstrI, FuType.alu, ALUOpType.add),
    C_FSWSP      -> List(InstrI, FuType.alu, ALUOpType.add),
    C_SDSP       -> List(InstrI, FuType.alu, ALUOpType.add)
  )
}
